{"create":[{"path":"tests/api/auth.spec.ts","content":"\n          import { AuthHandler } from '../../src/api/auth';\n          import { AuthService } from '../../src/service/auth';\n          import { Request, Response } from 'express';\n\n          describe('AuthHandler', () => {\n            let authService: AuthService;\n            let authHandler: AuthHandler;\n            let mockRequest: Partial<Request>;\n            let mockResponse: Partial<Response>;\n            let responseJsonMock: jest.Mock;\n            let responseSendMock: jest.Mock;\n            let responseStatusMock: jest.Mock;\n\n            beforeEach(() => {\n              authService = {\n                createUser: jest.fn(),\n                deleteUser: jest.fn(),\n                resetPassword: jest.fn(),\n                getAllUsers: jest.fn()\n              } as any;\n              authHandler = new AuthHandler(authService);\n              responseJsonMock = jest.fn();\n              responseSendMock = jest.fn();\n              responseStatusMock = jest.fn().mockReturnValue({\n                send: responseSendMock,\n                json: responseJsonMock\n              });\n\n\n              mockRequest = {};\n              mockResponse = {\n                status: responseStatusMock,\n                json: responseJsonMock,\n                send: responseSendMock,\n              };\n            });\n\n            describe('CreateUser', () => {\n              it('AUTH-01: Should return 400 if missing required fields', async () => {\n                mockRequest.body = {};\n                await authHandler.CreateUser(mockRequest as Request, mockResponse as Response);\n                expect(responseStatusMock).toHaveBeenCalledWith(400);\n                expect(responseSendMock).toHaveBeenCalledWith('Missing email or password');\n              });\n\n              it('AUTH-02: Should call authService.createUser with correct data', async () => {\n                const userData = {\n                  email: 'test@example.com',\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  role: 'super',\n                };\n                mockRequest.body = userData;\n                (authService.createUser as jest.Mock).mockResolvedValue({ message: 'User created' });\n\n                await authHandler.CreateUser(mockRequest as Request, mockResponse as Response);\n\n                expect(authService.createUser).toHaveBeenCalledWith(userData);\n                expect(responseJsonMock).toHaveBeenCalledWith({ message: 'User created' });\n              });\n\n              it('AUTH-03: Should return 500 if authService.createUser throws an error', async () => {\n                mockRequest.body = {\n                  email: 'test@example.com',\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  role: 'super',\n                };\n                (authService.createUser as jest.Mock).mockRejectedValue(new Error('Create user failed'));\n\n                await authHandler.CreateUser(mockRequest as Request, mockResponse as Response);\n\n                expect(responseStatusMock).toHaveBeenCalledWith(500);\n                expect(responseSendMock).toHaveBeenCalledWith('Create user failed');\n              });\n            });\n\n            describe('DeleteUser', () => {\n                it('AUTH-04: Should call authService.deleteUser with the uid from params', async () => {\n                  const uid = 'test-uid';\n                  mockRequest.params = { uid };\n                  (authService.deleteUser as jest.Mock).mockResolvedValue(undefined);\n\n                  await authHandler.DeleteUser(mockRequest as Request, mockResponse as Response);\n\n                  expect(authService.deleteUser).toHaveBeenCalledWith(uid);\n                  expect(responseSendMock).toHaveBeenCalledWith('User deleted successfully');\n                });\n\n                it('AUTH-05: Should return 500 if authService.deleteUser throws an error', async () => {\n                  const uid = 'test-uid';\n                  mockRequest.params = { uid };\n                  (authService.deleteUser as jest.Mock).mockRejectedValue(new Error('Delete user failed'));\n\n                  await authHandler.DeleteUser(mockRequest as Request, mockResponse as Response);\n\n                  expect(responseStatusMock).toHaveBeenCalledWith(500);\n                  expect(responseSendMock).toHaveBeenCalledWith('Delete user failed');\n                });\n              });\n\n            describe('resetPassword', () => {\n                it('AUTH-06: Should call authService.resetPassword with the email from the body', async () => {\n                  const email = 'test@example.com';\n                  mockRequest.body = { email };\n                  (authService.resetPassword as jest.Mock).mockResolvedValue({ responseStatus: 200, data: { message: 'Password reset initiated' } });\n\n                  await authHandler.resetPassword(mockRequest as Request, mockResponse as Response);\n\n                  expect(authService.resetPassword).toHaveBeenCalledWith(email);\n                  expect(responseStatusMock).toHaveBeenCalledWith(200);\n                  expect(responseSendMock).toHaveBeenCalledWith({ responseStatus: 200, data: { message: 'Password reset initiated' } });\n                });\n\n                it('AUTH-07: Should return 500 if authService.resetPassword throws an error', async () => {\n                  const email = 'test@example.com';\n                  mockRequest.body = { email };\n                  (authService.resetPassword as jest.Mock).mockRejectedValue(new Error('Reset password failed'));\n\n                  await authHandler.resetPassword(mockRequest as Request, mockResponse as Response);\n\n                  expect(responseStatusMock).toHaveBeenCalledWith(500);\n                  expect(responseSendMock).toHaveBeenCalledWith('Reset password failed');\n                });\n              });\n\n              describe('getAllUsers', () => {\n                it('AUTH-08: Should call authService.getAllUsers and return the result', async () => {\n                  const mockUsers = [{ email: 'test@example.com' }];\n                  (authService.getAllUsers as jest.Mock).mockResolvedValue(mockUsers);\n\n                  await authHandler.getAllUsers(mockRequest as Request, mockResponse as Response);\n\n                  expect(authService.getAllUsers).toHaveBeenCalled();\n                  expect(responseJsonMock).toHaveBeenCalledWith(mockUsers);\n                });\n\n                it('AUTH-09: Should return 500 if authService.getAllUsers throws an error', async () => {\n                  (authService.getAllUsers as jest.Mock).mockRejectedValue(new Error('Get all users failed'));\n\n                  await authHandler.getAllUsers(mockRequest as Request, mockResponse as Response);\n\n                  expect(responseStatusMock).toHaveBeenCalledWith(500);\n                  expect(responseSendMock).toHaveBeenCalledWith('Get all users failed');\n                });\n              });\n          });\n        "},{"path":"tests/service/auth.spec.ts","content":"\n          import { AuthService, AdminUser } from '../../src/service/auth';\n          import { Auth } from 'firebase-admin/auth';\n          import { EmailService } from '../../src/utils/mailer';\n          import { RecentService } from '../../src/service/recent';\n\n          describe('AuthService', () => {\n            let firestoreClient: any;\n            let authClient: any;\n            let authService: AuthService;\n            let emailService: any;\n            let recentService: any;\n\n            beforeEach(() => {\n              firestoreClient = {\n                collection: jest.fn().mockReturnValue({\n                  doc: jest.fn().mockReturnValue({\n                    set: jest.fn(),\n                    delete: jest.fn()\n                  }),\n                  get: jest.fn().mockResolvedValue({\n                    forEach: jest.fn()\n                  })\n                })\n              };\n              authClient = {\n                createUser: jest.fn(),\n                deleteUser: jest.fn(),\n                generatePasswordResetLink: jest.fn(),\n                getUserByEmail: jest.fn(),\n                setCustomUserClaims: jest.fn(),\n              };\n              emailService = {\n                sendEmails: jest.fn(),\n              }\n              recentService = {\n                addRecentActivity: jest.fn()\n              }\n\n              authService = new AuthService(firestoreClient, authClient);\n              authService[\"emailService\"] = emailService;\n              authService[\"recentService\"] = recentService;\n            });\n\n            describe('createUser', () => {\n              it('SERV-01: should create a user successfully', async () => {\n                const user: AdminUser = {\n                  email: 'test@example.com',\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  role: 'super',\n                };\n                (authClient.createUser as jest.Mock).mockResolvedValue({ uid: 'test-uid' });\n                (authClient.generatePasswordResetLink as jest.Mock).mockResolvedValue('reset-link');\n\n                const result = await authService.createUser(user);\n\n                expect(authClient.createUser).toHaveBeenCalledWith({\n                  email: user.email,\n                  emailVerified: false,\n                  password: expect.any(String),\n                  displayName: `${user.firstName} ${user.lastName}`,\n                  disabled: false,\n                });\n                expect(authClient.setCustomUserClaims).toHaveBeenCalledWith('test-uid', {\n                  role: user.role,\n                  department: user.department,\n                });\n                expect(firestoreClient.collection).toHaveBeenCalledWith('users');\n                expect(firestoreClient.collection('users').doc('test-uid').set).toHaveBeenCalledWith({\n                  email: user.email,\n                  displayName: `${user.firstName} ${user.lastName}`,\n                  role: user.role,\n                  department: user.department,\n                  uid: 'test-uid',\n                  createdAt: expect.any(Date),\n                });\n                expect(emailService.sendEmails).toHaveBeenCalled();\n                expect(recentService.addRecentActivity).toHaveBeenCalledWith(\"User creation\", {name: `${user.firstName} ${user.lastName}`})\n                expect(result.message).toContain('User created successfully');\n                expect(result.responseStatus).toBe(200);\n                expect(result.status).toBe('success');\n                expect(result.result).toBeDefined();\n              });\n\n              it('SERV-02: should handle errors during user creation', async () => {\n                const user: AdminUser = {\n                  email: 'test@example.com',\n                  firstName: 'John',\n                  lastName: 'Doe',\n                  role: 'super',\n                };\n                (authClient.createUser as jest.Mock).mockRejectedValue(new Error('Failed to create user'));\n\n                await expect(authService.createUser(user)).rejects.toThrow('Error creating user: Failed to create user');\n              });\n            });\n\n            describe('deleteUser', () => {\n              it('SERV-03: should delete a user successfully', async () => {\n                const uid = 'test-uid';\n\n                await authService.deleteUser(uid);\n\n                expect(authClient.deleteUser).toHaveBeenCalledWith(uid);\n                expect(firestoreClient.collection('users').doc(uid).delete).toHaveBeenCalled();\n              });\n\n              it('SERV-04: should handle errors during user deletion', async () => {\n                const uid = 'test-uid';\n                (authClient.deleteUser as jest.Mock).mockRejectedValue(new Error('Failed to delete user'));\n\n                await expect(authService.deleteUser(uid)).rejects.toThrow('Error deleting user: Failed to delete user');\n              });\n            });\n\n             describe('resetPassword', () => {\n                it('SERV-05: Should reset password successfully', async () => {\n                  const email = 'test@example.com';\n                  (authClient.getUserByEmail as jest.Mock).mockResolvedValue({\n                    customClaims: { role: 'super', department: 'test' },\n                    displayName: 'John Doe',\n                  });\n                  (authClient.generatePasswordResetLink as jest.Mock).mockResolvedValue('reset-link');\n                  (emailService.sendEmails as jest.Mock).mockResolvedValue(undefined);\n\n                  const result = await authService.resetPassword(email);\n\n                  expect(authClient.getUserByEmail).toHaveBeenCalledWith(email);\n                  expect(authClient.generatePasswordResetLink).toHaveBeenCalledWith(email);\n                  expect(emailService.sendEmails).toHaveBeenCalled();\n                  expect(result.message).toContain('Password reset link sent to email');\n                  expect(result.responseStatus).toBe(200);\n                  expect(result.status).toBe('success');\n                  expect(result.result).toBeNull();\n                });\n\n                it('SERV-06: Should handle user not found error during password reset', async () => {\n                  const email = 'test@example.com';\n                  (authClient.getUserByEmail as jest.Mock).mockRejectedValue({ code: 'auth/user-not-found' });\n\n                  const result = await authService.resetPassword(email);\n\n                  expect(authClient.getUserByEmail).toHaveBeenCalledWith(email);\n                  expect(result.message).toContain('User not found');\n                  expect(result.responseStatus).toBe(400);\n                  expect(result.status).toBe('error');\n                  expect(result.result).toBeNull();\n                });\n\n                it('SERV-07: Should handle other errors during password reset', async () => {\n                  const email = 'test@example.com';\n                  (authClient.getUserByEmail as jest.Mock).mockRejectedValue(new Error('Failed to reset password'));\n\n                  await expect(authService.resetPassword(email)).rejects.toThrow('Error updating password: Failed to reset password');\n                });\n              });\n\n              describe('getAllUsers', () => {\n                it('SERV-08: Should get all users successfully', async () => {\n                  const mockUsers = [{ email: 'test@example.com', firstName: 'John', lastName: 'Doe', role: 'super' }];\n                  (firestoreClient.collection('users').get as jest.Mock).mockResolvedValue({\n                    forEach: (callback: (user: any) => void) => {\n                      mockUsers.forEach(user => {\n                        callback({ data: () => user });\n                      });\n                    },\n                  });\n\n                  const result = await authService.getAllUsers();\n\n                  expect(firestoreClient.collection).toHaveBeenCalledWith('users');\n                  expect(firestoreClient.collection('users').get).toHaveBeenCalled();\n                  expect(result.message).toBe('Users fetched successfully');\n                  expect(result.responseStatus).toBe(200);\n                  expect(result.status).toBe('success');\n                  expect(result.result).toEqual({ users: mockUsers, total: mockUsers.length });\n                });\n\n                it('SERV-09: Should handle errors when getting all users', async () => {\n                  (firestoreClient.collection('users').get as jest.Mock).mockRejectedValue(new Error('Failed to get users'));\n\n                  await expect(authService.getAllUsers()).rejects.toThrow('Error fetching users: Failed to get users');\n                });\n              });\n          });\n        "},{"path":"tests/api/homeScreen.spec.ts","content":"\n          import { HomeScreenHandler } from '../../src/api/homeScreen';\n          import { HomeScreenService } from '../../src/service/homeScreen';\n          import { Request, Response } from 'express';\n\n          describe('HomeScreenHandler', () => {\n            let homeScreenService: HomeScreenService;\n            let homeScreenHandler: HomeScreenHandler;\n            let mockRequest: Partial<Request>;\n            let mockResponse: Partial<Response>;\n            let responseJsonMock: jest.Mock;\n            let responseSendMock: jest.Mock;\n            let responseStatusMock: jest.Mock;\n\n            beforeEach(() => {\n              homeScreenService = {\n                getMissions: jest.fn(),\n                updateMissions: jest.fn()\n              } as any;\n              homeScreenHandler = new HomeScreenHandler(homeScreenService);\n              responseJsonMock = jest.fn();\n              responseSendMock = jest.fn();\n              responseStatusMock = jest.fn().mockReturnValue({\n                send: responseSendMock,\n                json: responseJsonMock\n              });\n\n\n              mockRequest = {};\n              mockResponse = {\n                status: responseStatusMock,\n                json: responseJsonMock,\n                send: responseSendMock,\n              };\n            });\n\n            describe('getMissionData', () => {\n                it('HOME-01: Should call homeScreenService.getMissions and return the result', async () => {\n                  const mockMissions = [{ title: 'Mission 1' }];\n                  (homeScreenService.getMissions as jest.Mock).mockResolvedValue(mockMissions);\n\n                  await homeScreenHandler.getMissionData(mockRequest as Request, mockResponse as Response);\n\n                  expect(homeScreenService.getMissions).toHaveBeenCalled();\n                  expect(responseJsonMock).toHaveBeenCalledWith(mockMissions);\n                });\n\n                it('HOME-02: Should send the error message in case of error', async () => {\n                  const errorMessage = 'Failed to fetch missions';\n                  (homeScreenService.getMissions as jest.Mock).mockRejectedValue(errorMessage);\n\n                  await homeScreenHandler.getMissionData(mockRequest as Request, mockResponse as Response);\n\n                  expect(homeScreenService.getMissions).toHaveBeenCalled();\n                  expect(responseSendMock).toHaveBeenCalledWith(errorMessage);\n                });\n              });\n\n              describe('updateMissionData', () => {\n                it('HOME-03: Should return 400 if missing mission and announcements data', async () => {\n                    mockRequest.body = {};\n                    await homeScreenHandler.updateMissionData(mockRequest as Request, mockResponse as Response);\n                    expect(responseStatusMock).toHaveBeenCalledWith(400);\n                  });\n\n                it('HOME-04: Should call homeScreenService.updateMissions with the correct data', async () => {\n                  const missionData = {\n                    mission: {\n                      title: 'New Mission',\n                      body: 'New Body',\n                      backgroundImage: 'image.jpg',\n                    },\n                    announcements: {\n                      id: '1',\n                      title: 'New Announcement',\n                      description: 'New Description',\n                      date: '2024-01-01',\n                    },\n                  };\n                  mockRequest.body = missionData;\n                  (homeScreenService.updateMissions as jest.Mock).mockResolvedValue({ message: 'Mission updated' });\n\n                  await homeScreenHandler.updateMissionData(mockRequest as Request, mockResponse as Response);\n\n                  const expectedData = {\n                    mission: {\n                      title: 'New Mission',\n                      body: 'New Body',\n                      backgroundImage: 'image.jpg',\n                      updatedAt: expect.any(Date),\n                    },\n                    announcements: {\n                      id: '1',\n                      title: 'New Announcement',\n                      description: 'New Description',\n                      date: '2024-01-01',\n                      updatedAt: expect.any(Date),\n                    },\n                  };\n\n                  expect(homeScreenService.updateMissions).toHaveBeenCalledWith(expectedData);\n                  expect(responseJsonMock).toHaveBeenCalledWith({ message: 'Mission updated' });\n                });\n\n                it('HOME-05: Should return 500 if homeScreenService.updateMissions throws an error', async () => {\n                  const missionData = {\n                    mission: {\n                      title: 'New Mission',\n                      body: 'New Body',\n                      backgroundImage: 'image.jpg',\n                    },\n                    announcements: {\n                      id: '1',\n                      title: 'New Announcement',\n                      description: 'New Description',\n                      date: '2024-01-01',\n                    },\n                  };\n                  mockRequest.body = missionData;\n                  (homeScreenService.updateMissions as jest.Mock).mockRejectedValue(new Error('Update mission failed'));\n\n                  await homeScreenHandler.updateMissionData(mockRequest as Request, mockResponse as Response);\n\n                  expect(responseStatusMock).toHaveBeenCalledWith(500);\n                  expect(responseJsonMock).toHaveBeenCalledWith('Update mission failed');\n                });\n              });\n          });\n        "},{"path":"tests/api/recent.spec.ts","content":"\n          import { RecentHandler } from '../../src/api/recent';\n          import { RecentService } from '../../src/service/recent';\n          import { Request, Response } from 'express';\n\n          describe('RecentHandler', () => {\n            let recentService: RecentService;\n            let recentHandler: RecentHandler;\n            let mockRequest: Partial<Request>;\n            let mockResponse: Partial<Response>;\n            let responseJsonMock: jest.Mock;\n            let responseStatusMock: jest.Mock;\n\n            beforeEach(() => {\n              recentService = {\n                getRecentActivity: jest.fn(),\n              } as any;\n              recentHandler = new RecentHandler(recentService);\n              responseJsonMock = jest.fn();\n              responseStatusMock = jest.fn().mockReturnValue({\n                json: responseJsonMock\n              });\n\n\n              mockRequest = {};\n              mockResponse = {\n                status: responseStatusMock,\n                json: responseJsonMock,\n              };\n            });\n\n            describe('getRecentActivity', () => {\n                it('RECENT-01: Should call recentService.getRecentActivity and return the result', async () => {\n                  const mockActivities = [{ activity: 'Activity 1' }];\n                  (recentService.getRecentActivity as jest.Mock).mockResolvedValue(mockActivities);\n\n                  await recentHandler.getRecentActivity(mockRequest as Request, mockResponse as Response);\n\n                  expect(recentService.getRecentActivity).toHaveBeenCalled();\n                  expect(responseJsonMock).toHaveBeenCalledWith(mockActivities);\n                  expect(responseStatusMock).toHaveBeenCalledWith(200);\n                });\n\n                it('RECENT-02: Should return 500 if recentService.getRecentActivity throws an error', async () => {\n                  const errorMessage = 'Failed to fetch recent activities';\n                  (recentService.getRecentActivity as jest.Mock).mockRejectedValue(new Error(errorMessage));\n\n                  await recentHandler.getRecentActivity(mockRequest as Request, mockResponse as Response);\n\n                  expect(recentService.getRecentActivity).toHaveBeenCalled();\n                  expect(responseStatusMock).toHaveBeenCalledWith(500);\n                  expect(responseJsonMock).toHaveBeenCalledWith({\n                      status: \"error\",\n                      message: `Error getting recent activities: ${errorMessage}`,\n                      responseStatus: 500,\n                      result: null,\n                      timestamp: expect.any(Date)\n                  });\n                });\n              });\n          });\n        "}],"needToRead":[{"path":"","reason":""}]}